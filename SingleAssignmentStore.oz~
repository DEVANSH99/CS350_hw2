\insert 'Desktop/CS350_hw2/ProcessRecords.oz'

declare SAS AddToSAS RetrieveFromSAS BindRefToKeyInSAS BindValueToKeyInSAS WeakSubstitute

SAS = {Dictionary.new}

proc {AddToSAS X}
   {Dictionary.put SAS X ec(value: nil es: [X])}
end

fun {RetrieveFromSAS X}
   local EC in
      EC = {Dictionary.get SAS X}
      if EC.value == nil then X else EC.value end
   end
end

proc {BindRefToKeyInSAS X Y}
   local EX EY in
      EX = {Dictionary.get SAS X}
      EY = {Dictionary.get SAS Y}
      if {And EX.value == nil  EY.value == nil} then
	 if {List.member Y EX.es} then
	    skip
	 else
	    local SubsRefs in
	       proc {SubsRefs Xs List}
		  case Xs
		  of nil then skip
		  else
		     {Dictionary.remove Xs.1}
		     {Dictionary.put SAS Xs.1 ec(value:nil es:List)}
		     {SubsRefs Xs.2 List}
		  end
	       end
	       {SubsRefs EX.es {Append EX.es EY.es}}
	       {SubsRefs EY.es {Append EX.es EY.es}}
	    end	% local
	 end % if {List.member }
      else
	 if EX.val \= nil then
	    raise notUndefined(X) end
	 end
	 if EY.val \= nil then
	    raise notUndefined(Y) end
	 end
      end % if Ex.val ==
   end % local EX EY
end % proc

fun {WeakSubstitute X}
  case X
  of equivalence(A) then {RetrieveFromSAS A}
  else X end
end

proc {BindValueToKeyInSAS X E}
   local Ex in 
      case E
      of literal(A) then
	 Ex = {Dictionary.get X}
	 if Ex.value == nil
	 then
	    {Dictionary.remove X}
	    {Dictionary.put X ec(val:E es:Ex.es)}
	 else
	    raise notUndefined(X) end 
	 end
      [] record | L | Pairs then
	 Ex = {Dictionary.get X}
	 if Ex.value ==nil then
	    local Canon CanonSub Rec in
	       {Dictionary.remove X}
	       Canon = {Canonize Pairs.1}
	       CanonSub = {Map Canon fun {$ X} [X.1 {WeakSubstitute X.2.1}] end}
	       Rec = [record L CanonSub]
	       {Dictionary.put X ec(val:Rec es:[X])}
	    end
	 else
	    raise notUndefined(X) end
	 end
      end
   end
end

   
